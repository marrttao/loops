# Generated by Qodo Gen

import unittest
from io import StringIO
import sys
from main import rhombus

class TestRhombus(unittest.TestCase):

    # Correctly prints a rhombus shape with given dimensions
    def test_correct_rhombus_shape(self):
        # Capture the output of the rhombus function
        captured_output = StringIO()
        sys.stdout = captured_output
        rhombus(3, 3)
        sys.stdout = sys.__stdout__

        expected_output = "\n" \
                          "    *       \n" \
                          "  * * *     \n" \
                          "* * * * *   \n" \
                          "  * * *     \n" \
                          "    *       \n" \
                          "\n"
        self.assertEqual(captured_output.getvalue(), expected_output)

    # Handles zero values for len_1 and len_2 without errors
    def test_zero_values(self):
        # Capture the output of the rhombus function
        captured_output = StringIO()
        sys.stdout = captured_output
        rhombus(0, 0)
        sys.stdout = sys.__stdout__

        expected_output = "\n\n"
        self.assertEqual(captured_output.getvalue(), expected_output)

    # Manages negative input values gracefully
    def test_negative_values(self):
        # Capture the output of the rhombus function
        captured_output = StringIO()
        sys.stdout = captured_output
        rhombus(-3, -3)
        sys.stdout = sys.__stdout__

        expected_output = "\n\n"
        self.assertEqual(captured_output.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()
